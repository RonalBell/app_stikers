<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>App Stickers</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .drop-zone {
            border: 2px dashed #4a5568;
            transition: all 0.3s ease;
        }
        .drop-zone.dragover {
            border-color: #4299e1;
            background-color: #ebf8ff;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-center mb-8">App Stickers</h1>
        
        <!-- Estado de WhatsApp -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Estado de WhatsApp</h2>
            <div id="qr-container" class="flex justify-center mb-4">
                <% if (qrCode) { %>
                    <img src="<%= qrCode %>" alt="QR Code" class="max-w-xs">
                <% } else { %>
                    <p class="text-gray-500">Esperando código QR...</p>
                <% } %>
            </div>
            <div id="status" class="text-center">
                <% if (isAuthenticated) { %>
                    <p class="text-green-600">✅ WhatsApp conectado</p>
                <% } else { %>
                    <p class="text-yellow-600">⚠️ Esperando conexión...</p>
                <% } %>
            </div>
        </div>

        <!-- Zona de subida de stickers -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-semibold mb-4">Subir Stickers</h2>
            <div id="drop-zone" class="drop-zone rounded-lg p-8 text-center cursor-pointer mb-4">
                <p class="text-gray-600">Arrastra y suelta imágenes aquí o</p>
                <input type="file" id="file-input" multiple accept="image/*" class="hidden">
                <button class="mt-2 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                    Seleccionar archivos
                </button>
            </div>
            
            <!-- Lista de archivos -->
            <div id="file-list" class="mt-4"></div>

            <!-- Barra de progreso -->
            <div id="progress-container" class="hidden mt-4">
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
                </div>
                <p id="progress-text" class="text-sm text-gray-600 mt-2 text-center">0%</p>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const dropZone = document.getElementById('drop-zone');
        const fileInput = document.getElementById('file-input');
        const fileList = document.getElementById('file-list');
        const progressContainer = document.getElementById('progress-container');
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');

        // Eventos de Socket.IO
        socket.on('qr', (qr) => {
            document.getElementById('qr-container').innerHTML = `<img src="${qr}" alt="QR Code" class="max-w-xs">`;
        });

        socket.on('ready', (message) => {
            document.getElementById('status').innerHTML = `<p class="text-green-600">✅ ${message}</p>`;
        });

        socket.on('authenticated', (message) => {
            document.getElementById('status').innerHTML = `<p class="text-green-600">✅ ${message}</p>`;
        });

        socket.on('auth_failure', (message) => {
            document.getElementById('status').innerHTML = `<p class="text-red-600">❌ ${message}</p>`;
        });

        // Eventos de Drag & Drop
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropZone.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropZone.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            dropZone.classList.add('dragover');
        }

        function unhighlight(e) {
            dropZone.classList.remove('dragover');
        }

        dropZone.addEventListener('drop', handleDrop, false);
        fileInput.addEventListener('change', handleFiles, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            handleFiles({ target: { files } });
        }

        function handleFiles(e) {
            const files = [...e.target.files];
            uploadFiles(files);
        }

        function uploadFiles(files) {
            const formData = new FormData();
            files.forEach(file => {
                formData.append('stickers', file);
            });

            progressContainer.classList.remove('hidden');
            fileList.innerHTML = '';

            files.forEach(file => {
                const fileItem = document.createElement('div');
                fileItem.className = 'flex items-center justify-between p-2 bg-gray-50 rounded mb-2';
                fileItem.innerHTML = `
                    <span class="text-sm">${file.name}</span>
                    <span class="text-sm text-gray-500">Procesando...</span>
                `;
                fileList.appendChild(fileItem);
            });

            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    progressBar.style.width = '100%';
                    progressText.textContent = '100%';
                    setTimeout(() => {
                        progressContainer.classList.add('hidden');
                        fileList.innerHTML = '';
                    }, 2000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                progressContainer.classList.add('hidden');
            });
        }

        // Click en la zona de drop
        dropZone.addEventListener('click', () => {
            fileInput.click();
        });
    </script>
</body>
</html> 